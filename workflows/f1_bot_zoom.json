{
  "name": "f1_bot_zoom",
  "nodes": [
    {
      "parameters": {
        "errorMessage": "={{ $json.error.cause.message }}"
      },
      "id": "2b5d80a4-7d2b-4bb5-a773-5ffaca2190bc",
      "name": "No Recording/Transcript available",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        -320,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef149af8-7f9d-4e5a-8ccf-4a5f1e09eecc",
              "name": "transcript_file",
              "type": "string",
              "value": "={{ $json.recording_files.find(f => f.file_type === 'TRANSCRIPT').download_url }}"
            }
          ]
        },
        "options": {}
      },
      "id": "66da0210-6066-457f-bcc3-1af98e9859ca",
      "name": "Filter transcript URL",
      "type": "n8n-nodes-base.set",
      "position": [
        -260,
        140
      ],
      "typeVersion": 3.4,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f3ad0404-4b14-4398-a1cb-2aa272573c06",
      "name": "Filter: Only 1 item",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -60,
        240
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "url": "={{ $json.transcript_file }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "39f1feab-12f2-47ab-96a6-4bb56ebc6417",
      "name": "Zoom: Get transcript file",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        120,
        100
      ],
      "typeVersion": 4.2,
      "credentials": {
        "zoomOAuth2Api": {
          "id": "GvkMMGjMdcsNDBlN",
          "name": "zoom-bot-UAI"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "593331c7-f4a4-4900-9ab1-4ce4f2d5e3ab",
      "name": "Extract text from transcript file",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        300,
        180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "70019192-02ef-4b0a-a747-3ca5f46aeeaa",
              "name": "transcript",
              "type": "string",
              "value": "={{ $json.data.split('\\r\\n\\r\\n').slice(1).map(block => {\n    const lines = block.split('\\r\\n');\n    return lines.slice(2).join(' ');\n}).join('\\n') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8b0bccb8-cb57-43ab-87dd-4a5d5ca9f2bc",
      "name": "Format transcript text",
      "type": "n8n-nodes-base.set",
      "position": [
        500,
        240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "url": "=https://api.zoom.us/v2/past_meetings/{{ $('basic-info').item.json.meetingId }}/participants",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "6086aff8-ebaf-4ea9-a5eb-b66d3ec46b72",
      "name": "Zoom: Get participants data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        700,
        180
      ],
      "typeVersion": 4.2,
      "credentials": {
        "zoomOAuth2Api": {
          "id": "GvkMMGjMdcsNDBlN",
          "name": "zoom-bot-UAI"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cc51b7e4-d5c2-4cd4-9488-4d181eaaa02e",
              "name": "subject",
              "type": "string",
              "value": "=Meeting summary: {{ $('Zoom: Get data by meetingId').item.json.topic }} on {{ DateTime.fromISO($('Zoom: Get data by meetingId').item.json.start_time).toFormat('yyyy-MM-dd HH:mm') }}"
            },
            {
              "id": "f3940ea2-9084-4c25-828e-5ddaa428ec83",
              "name": "=to",
              "type": "string",
              "value": "={{ $('Zoom: Get participants data').item.json.participants[0].user_email }}"
            },
            {
              "id": "1211af5b-2240-44ce-9df7-63d93f57806e",
              "name": "body",
              "type": "string",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e6e4da6f-587c-4b61-a109-045f43fcc0a5",
      "name": "Sort for mail delivery",
      "type": "n8n-nodes-base.set",
      "position": [
        1280,
        220
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  const body = item.json.body;\n  if (!body) continue;\n\n  // Función para convertir markdown a HTML básico\n  const formatMarkdown = (text) => {\n    return text\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') // Negritas\n      .replace(/\\n/g, '<br>'); // Saltos de línea\n  };\n\n  // Extraer título desde la sección Fecha\n  const titleMatch = body.match(/\\*\\*Fecha:\\*\\*\\s*(.*?)\\s{2,}/);\n  const title = titleMatch ? titleMatch[1].trim() : \"Acta de Reunión\";\n\n  const horaInicioMatch = body.match(/\\*\\*Hora de inicio y fin:\\*\\*\\s*(.*?)\\s{2,}/);\n  const horaInicio = horaInicioMatch ? horaInicioMatch[1].trim() : \"\";\n\n  const getSection = (title) => {\n    const regex = new RegExp(\n      `\\\\*\\\\*${title}:\\\\*\\\\*[\\\\s\\\\S]*?(?=\\\\n\\\\*\\\\*|\\\\n---|\\\\n$)`,\n      \"i\"\n    );\n    const match = body.match(regex);\n    return match\n      ? match[0].replace(new RegExp(`\\\\*\\\\*${title}:\\\\*\\\\*`, \"i\"), \"\").trim()\n      : \"\";\n  };\n\n  const participantes = getSection(\"Participantes\");\n  const resumen = getSection(\"Resumen general de la clase\");\n  const citas = getSection(\"Intervenciones destacadas o citas relevantes\");\n  const observacion = getSection(\"Observación sobre presencia del docente\");\n  const conclusion = getSection(\"Conclusión\");\n\n  const html = `<html>\n  <body style=\"font-family: Arial, sans-serif; max-width: 800px; margin: 20px;\">\n    <h1 style=\"color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">Acta de Reunión - ${title}</h1>\n\n    ${\n      horaInicio\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Hora de inicio:</h2>\n    <p style=\"margin-left: 20px;\">${formatMarkdown(horaInicio)}</p>`\n        : \"\"\n    }\n\n    ${\n      participantes\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Participantes:</h2>\n    <ul style=\"list-style-type: none; padding-left: 20px;\">\n    ${participantes\n      .split(\"\\n\")\n      .map((p) => `<li>${formatMarkdown(p.replace(\"- \", \"\").trim())}</li>`)\n      .join(\"\\n\")}\n    </ul>`\n        : \"\"\n    }\n\n    ${\n      resumen\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Resumen de la clase:</h2>\n    <p style=\"margin-left: 20px;\">${formatMarkdown(resumen)}</p>`\n        : \"\"\n    }\n\n    ${\n      citas\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Citas destacadas:</h2>\n    <ul style=\"margin-left: 20px;\">\n    ${citas\n      .split(\"\\n\")\n      .filter((p) => p.trim() !== \"\")\n      .map((p) => `<li>${formatMarkdown(p.trim().replace(/^[-–—]\\s*/, \"\"))}</li>`)\n      .join(\"\\n\")}\n    </ul>`\n        : \"\"\n    }\n\n    ${\n      observacion\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Observación sobre la presencia del docente:</h2>\n    <p style=\"margin-left: 20px;\">${formatMarkdown(observacion)}</p>`\n        : \"\"\n    }\n\n    ${\n      conclusion\n        ? `\n    <h2 style=\"color: #2c3e50; margin-top: 20px;\">Conclusión:</h2>\n    <p style=\"margin-left: 20px;\">${formatMarkdown(conclusion)}</p>`\n        : \"\"\n    }\n\n  </body>\n</html>`;\n\n  items.push({\n    json: {\n      html,\n      to: item.json.to,\n      subject: item.json.subject,\n    },\n  });\n}\n\nreturn items;\n"
      },
      "id": "14b62c6d-0746-4f54-90e2-65f6444c9d9b",
      "name": "Format to html",
      "type": "n8n-nodes-base.code",
      "position": [
        1460,
        160
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fromEmail": "dante.luque@uai.edu.pe",
        "toEmail": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "html": "={{ $json.html }}",
        "options": {}
      },
      "id": "77f2954d-93db-4b2b-ac5d-d99f26b82fc1",
      "name": "Send meeting summary",
      "type": "n8n-nodes-base.emailSend",
      "position": [
        1640,
        320
      ],
      "webhookId": "81c4f081-f3d1-44c3-a344-3f735f1873b5",
      "typeVersion": 2.1,
      "credentials": {
        "smtp": {
          "id": "0Wmnl8T7UfTjqSNn",
          "name": "SMTP dante.luque.edu.pe"
        }
      }
    },
    {
      "parameters": {
        "method": "=GET",
        "url": "=https://api.zoom.us/v2/meetings/{{ $json.id }}/recordings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "d082df5f-2e27-4c56-a5fb-b7fb2e547808",
      "name": "Zoom: Get transcripts data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -480,
        260
      ],
      "typeVersion": 4.2,
      "credentials": {
        "zoomOAuth2Api": {
          "id": "GvkMMGjMdcsNDBlN",
          "name": "zoom-bot-UAI"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Actúa como un supervisor académico que evalúa rigurosamente la calidad de una clase grabada en Zoom. Con base en la transcripción cruda y limpia, redacta un acta formal de reunión y ofrece un análisis crítico y objetivo sobre el desarrollo de la sesión. Sé formal pero exigente, profesional y claro en tus observaciones.\n\nUtiliza los siguientes datos:\n\n- **Fecha de la reunión:** {{ $('basic-info-2').item.json.startTimeLocal }}\n- **Fecha en la que el host inició la reunión: {{ $('basic-info').item.json.startTimeLocal }}\n- **Docente (host):** {{ $('Zoom: Get transcripts data').item.json.host_email }}\n\n---\n\n**Transcript crudo con tiempo** (útil para análisis de presencia y participación):\n{{ $('Extract text from transcript file').item.json.data }}\n\n**Transcript limpio** (útil para redacción del acta):\n{{ $('Format transcript text').item.json.transcript }}\n\n**Participantes registrados:**\n{{ $json.participants.map(p => p.name + ' (' + p.user_email + ')').join(', ') }}\n\n---\n\nRedacta el acta con la siguiente estructura:\n\n---\n\n**Acta de Reunión**\n\n**Fecha:** [En formato DD/MM/AAAA]  \n**Hora de inicio y fin (si está disponible):**  \n**Participantes:** [Lista con nombres y correos]  \n**Resumen general de la clase:**  \nRedacta en español neutro y formal un resumen claro y profesional de los temas tratados, decisiones tomadas, acuerdos importantes, materiales discutidos, etc.  \nIncluye un enfoque **crítico y exigente sobre el desempeño del docente**. Si detectas comportamientos inadecuados, lenguaje poco profesional, desorganización o falta de preparación, **destácalo en negrita** y con tono supervisivo.\n\n**Intervenciones destacadas o citas relevantes:**  \nIncluye algunas frases textuales si son representativas de la clase o demuestran algo relevante (positivo o negativo).\n\n**Observación sobre presencia del docente:**  \n1. Detecta y menciona el tiempo exacto de la **primera intervención del docente** (host), según el transcript crudo.  \n2. Evalúa si estuvo presente desde el inicio o si hubo una demora considerable.  \n3. Si el docente no interviene durante los **primeros 5 minutos**, **resáltalo en negrita** como una falta.\n\n---\n\n**Indicaciones generales:**\n- Usa **negrita** para destacar observaciones importantes o llamadas de atención.\n- Sé imparcial, objetivo y firme.\n- No inventes información si no está en el transcript.\n- El resultado debe parecer un informe profesional que pueda ser presentado ante un comité académico.\n\n",
        "options": {}
      },
      "id": "b305c0a3-5acd-4756-a2ac-af9ea6aea6e8",
      "name": "Create meeting summary",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        920,
        140
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": "qwen/qwq-32b:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        360,
        760
      ],
      "id": "112b6ac7-d715-41d5-bfd3-ee1d8c115254",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "E6M0X8KXICCAroWG",
          "name": "OpenRouter apikey"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recording-completed",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1300,
        540
      ],
      "id": "e1bbb747-6f74-4538-a229-9b62ae9589b2",
      "name": "recording-completed",
      "webhookId": "a1a5385b-23c9-4096-be0f-66f260665f2f"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "get",
        "meetingId": "={{ $json.meetingId }}",
        "additionalFields": {}
      },
      "id": "a6ac3b3b-ef1b-41ec-98e9-761081171e04",
      "name": "Zoom: Get data by meetingId",
      "type": "n8n-nodes-base.zoom",
      "position": [
        -920,
        380
      ],
      "typeVersion": 1,
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "credentials": {
        "zoomOAuth2Api": {
          "id": "GvkMMGjMdcsNDBlN",
          "name": "zoom-bot-UAI"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const { object } = $json.body.payload;\n\n// Convertir start_time UTC a hora local (Perú)\nconst startTimeUTC = new Date(object.start_time);\n\nconst options = {\n  timeZone: 'America/Lima',\n  hour12: false,\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nconst startTimeLocal = startTimeUTC.toLocaleString('es-PE', options); // ejemplo: \"27/06/2025, 10:30\"\n\nreturn {\n  json: {\n    meetingId: object.id,\n    topic: object.topic,\n    startTimeUTC: object.start_time,\n    startTimeLocal: startTimeLocal,\n    uuid: object.uuid,\n    hostId: object.host_id\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        460
      ],
      "id": "0e251cf7-bea1-4716-b1ac-f6e1e55e7b63",
      "name": "basic-info"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "meeting-started",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        80,
        740
      ],
      "id": "51ccdf03-a7ed-42f9-86c6-b0ee65af58aa",
      "name": "meeting-started",
      "webhookId": "ff2fd24c-2119-42f3-bd3e-ec5e3921d1f3",
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        860,
        380
      ],
      "id": "f71cddb0-811a-466c-9163-3b292be9c23e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "sfJcS7f5MZWQ5awr",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\n\n// Convertir start_time de UTC a hora local (Perú)\nconst startTimeUTC = new Date(data.start_time);\nconst options = {\n  timeZone: 'America/Lima',\n  hour12: false,\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n};\nconst startTimeLocal = startTimeUTC.toLocaleString('es-PE', options); // Resultado: \"27/06/2025, 10:30\"\n\nreturn {\n  json: {\n    uuid: data.uuid,\n    id: data.id,\n    hostId: data.host_id,\n    hostEmail: data.host_email,\n    assistantId: data.assistant_id,\n    topic: data.topic,\n    type: data.type,\n    status: data.status,\n    startTimeUTC: data.start_time,\n    startTimeLocal: startTimeLocal,\n    duration: data.duration,\n    timezone: data.timezone,\n    agenda: data.agenda,\n    createdAt: data.created_at,\n    startUrl: data.start_url,\n    joinUrl: data.join_url\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        320
      ],
      "id": "411e4848-9762-4c4b-87a9-f25aae409e20",
      "name": "basic-info-2"
    }
  ],
  "pinData": {},
  "connections": {
    "Format to html": {
      "main": [
        [
          {
            "node": "Send meeting summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Only 1 item": {
      "main": [
        [
          {
            "node": "Filter: Only 1 item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Zoom: Get transcript file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter transcript URL": {
      "main": [
        [
          {
            "node": "Filter: Only 1 item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create meeting summary": {
      "main": [
        [
          {
            "node": "Sort for mail delivery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format transcript text": {
      "main": [
        [
          {
            "node": "Zoom: Get participants data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort for mail delivery": {
      "main": [
        [
          {
            "node": "Format to html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get transcript file": {
      "main": [
        [
          {
            "node": "Extract text from transcript file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get transcripts data": {
      "main": [
        [
          {
            "node": "Filter transcript URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Recording/Transcript available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get participants data": {
      "main": [
        [
          {
            "node": "Create meeting summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract text from transcript file": {
      "main": [
        [
          {
            "node": "Format transcript text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Zoom: Get data by meetingId": {
      "main": [
        [
          {
            "node": "basic-info-2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recording-completed": {
      "main": [
        [
          {
            "node": "basic-info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "basic-info": {
      "main": [
        [
          {
            "node": "Zoom: Get data by meetingId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "meeting-started": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create meeting summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "basic-info-2": {
      "main": [
        [
          {
            "node": "Zoom: Get transcripts data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a03fe184-f818-451f-9bac-ae745595a146",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "44e428a6215583099d0174473a6ca8f47ec4ace791e57f79f0b224a51c9b8d2b"
  },
  "id": "67mwO3ZHVWS2KiSs",
  "tags": []
}